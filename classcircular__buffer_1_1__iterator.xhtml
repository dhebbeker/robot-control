<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Robot Control: circular_buffer&lt; _Tp, N_ &gt;::_iterator&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Robot Control
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="classcircular__buffer.xhtml">circular_buffer</a></li><li class="navelem"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classcircular__buffer_1_1__iterator-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">circular_buffer&lt; _Tp, N_ &gt;::_iterator&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="circular__buffer_8hpp_source.xhtml">circular_buffer.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a4683180d14cf9d611ca984396e0b8c4b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#a4683180d14cf9d611ca984396e0b8c4b">iterator_category</a> = std::input_iterator_tag</td></tr>
<tr class="separator:a4683180d14cf9d611ca984396e0b8c4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4163b557c82966218ac69e453cec8257"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#a4163b557c82966218ac69e453cec8257">difference_type</a> = typename std::make_signed&lt; <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> &gt;::type</td></tr>
<tr class="separator:a4163b557c82966218ac69e453cec8257"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2268aa1449d5a65ff56e2b796dfe3152"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#a2268aa1449d5a65ff56e2b796dfe3152">value_type</a> = T</td></tr>
<tr class="separator:a2268aa1449d5a65ff56e2b796dfe3152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf9d2234b874d51994b29fb21662c1db"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#aaf9d2234b874d51994b29fb21662c1db">reference</a> = const T &amp;</td></tr>
<tr class="separator:aaf9d2234b874d51994b29fb21662c1db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f182b5d67ebd13f3033cc17be69261"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#a33f182b5d67ebd13f3033cc17be69261">pointer</a> = const T *</td></tr>
<tr class="separator:a33f182b5d67ebd13f3033cc17be69261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9d5defc29fbe8c9893776356ae751c8"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#aa9d5defc29fbe8c9893776356ae751c8">DataRef</a> = T(&amp;)[N]</td></tr>
<tr class="separator:aa9d5defc29fbe8c9893776356ae751c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a2ed57f3e08e404393a9bc9f19b444"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#ae9a2ed57f3e08e404393a9bc9f19b444">_Self</a> = <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; T &gt;</td></tr>
<tr class="separator:ae9a2ed57f3e08e404393a9bc9f19b444"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af1be03735bc40e2921ab21bb9524d0dd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">_iterator</a> (<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#aa9d5defc29fbe8c9893776356ae751c8">DataRef</a> _data, const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> _index, const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> _distance)</td></tr>
<tr class="separator:af1be03735bc40e2921ab21bb9524d0dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d2050bf6886912e6a613a41837b658d"><td class="memItemLeft" align="right" valign="top">T&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#a5d2050bf6886912e6a613a41837b658d">operator*</a> () const</td></tr>
<tr class="separator:a5d2050bf6886912e6a613a41837b658d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab44c3d77f8d592c0168cca8fb6102186"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#ae9a2ed57f3e08e404393a9bc9f19b444">_Self</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#ab44c3d77f8d592c0168cca8fb6102186">operator++</a> ()</td></tr>
<tr class="separator:ab44c3d77f8d592c0168cca8fb6102186"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:acbe36b751d50aa90afe4a5ded3b8c149"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#acbe36b751d50aa90afe4a5ded3b8c149">operator!=</a> (const <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; T &gt; &amp;lhs, const <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; T &gt; &amp;rhs)</td></tr>
<tr class="separator:acbe36b751d50aa90afe4a5ded3b8c149"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ae9a2ed57f3e08e404393a9bc9f19b444" name="ae9a2ed57f3e08e404393a9bc9f19b444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9a2ed57f3e08e404393a9bc9f19b444">&#9670;&nbsp;</a></span>_Self</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::_Self =  <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt;T&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa9d5defc29fbe8c9893776356ae751c8" name="aa9d5defc29fbe8c9893776356ae751c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9d5defc29fbe8c9893776356ae751c8">&#9670;&nbsp;</a></span>DataRef</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::DataRef =  T(&amp;)[N]</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4163b557c82966218ac69e453cec8257" name="a4163b557c82966218ac69e453cec8257"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4163b557c82966218ac69e453cec8257">&#9670;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::difference_type =  typename std::make_signed&lt;<a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&gt;::type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4683180d14cf9d611ca984396e0b8c4b" name="a4683180d14cf9d611ca984396e0b8c4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4683180d14cf9d611ca984396e0b8c4b">&#9670;&nbsp;</a></span>iterator_category</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::iterator_category =  std::input_iterator_tag</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a33f182b5d67ebd13f3033cc17be69261" name="a33f182b5d67ebd13f3033cc17be69261"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33f182b5d67ebd13f3033cc17be69261">&#9670;&nbsp;</a></span>pointer</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::pointer =  const T*</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaf9d2234b874d51994b29fb21662c1db" name="aaf9d2234b874d51994b29fb21662c1db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf9d2234b874d51994b29fb21662c1db">&#9670;&nbsp;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::reference =  const T&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2268aa1449d5a65ff56e2b796dfe3152" name="a2268aa1449d5a65ff56e2b796dfe3152"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2268aa1449d5a65ff56e2b796dfe3152">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::value_type =  T</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af1be03735bc40e2921ab21bb9524d0dd" name="af1be03735bc40e2921ab21bb9524d0dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1be03735bc40e2921ab21bb9524d0dd">&#9670;&nbsp;</a></span>_iterator()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::_iterator&lt; T &gt;::_iterator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#aa9d5defc29fbe8c9893776356ae751c8">DataRef</a>&#160;</td>
          <td class="paramname"><em>_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td>
          <td class="paramname"><em>_index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td>
          <td class="paramname"><em>_distance</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a5d2050bf6886912e6a613a41837b658d" name="a5d2050bf6886912e6a613a41837b658d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d2050bf6886912e6a613a41837b658d">&#9670;&nbsp;</a></span>operator*()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab44c3d77f8d592c0168cca8fb6102186" name="ab44c3d77f8d592c0168cca8fb6102186"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab44c3d77f8d592c0168cca8fb6102186">&#9670;&nbsp;</a></span>operator++()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml#ae9a2ed57f3e08e404393a9bc9f19b444">_Self</a> &amp; <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;<a class="el" href="classcircular__buffer_1_1__iterator.xhtml#af1be03735bc40e2921ab21bb9524d0dd">::_iterator</a>&lt; T &gt;::operator++ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Friends And Related Function Documentation</h2>
<a id="acbe36b751d50aa90afe4a5ded3b8c149" name="acbe36b751d50aa90afe4a5ded3b8c149"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbe36b751d50aa90afe4a5ded3b8c149">&#9670;&nbsp;</a></span>operator!=</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">friend</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>robot-control-src/src/utils/<a class="el" href="circular__buffer_8hpp_source.xhtml">circular_buffer.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Jul 25 2022 10:42:09 for Robot Control by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4
</small></address>
</body>
</html>
