<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Robot Control: robot-control-src/src/utils/lazy_creation.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Robot Control
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_11fcc4a44a9b64dfb7d33c3f0a78b9e9.xhtml">robot-control-src</a></li><li class="navelem"><a class="el" href="dir_2db2811a5034f27e35c4073bde1407d6.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_609ebbef7d9993506f20c6d1bfb81661.xhtml">utils</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">lazy_creation.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="lazy__creation_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;utility&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;functional&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="namespacelazy__creation__details.xhtml">   10</a></span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacelazy__creation__details.xhtml">lazy_creation_details</a></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="namespacelazy__creation__details.xhtml#a1c721de2ab5b57d9f6cda47692e75c20">   16</a></span>T* <a class="code hl_function" href="namespacelazy__creation__details.xhtml#a1c721de2ab5b57d9f6cda47692e75c20">make_new</a>(Args &amp;&amp;... args)</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <a class="code hl_define" href="arduino__helpers_8hpp.xhtml#a8a40d3489d8d1b60ee4760237c9c4d6d">new_s_pre</a>( T(std::forward&lt;Args&gt;(args)...) );</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  T* <span class="keyword">const</span> p = <span class="keyword">new</span> T(std::forward&lt;Args&gt;(args)...);</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  assert(p != <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keywordflow">return</span> p;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>}</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="classlazy__creation__details_1_1Forward.xhtml">   28</a></span><span class="keyword">class </span><a class="code hl_class" href="classlazy__creation__details_1_1Forward.xhtml">Forward</a></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>{</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="classlazy__creation__details_1_1Forward.xhtml#aac49e7de9d89ebd0b87f444e828e8595">   31</a></span>  <a class="code hl_function" href="classlazy__creation__details_1_1Forward.xhtml#aac49e7de9d89ebd0b87f444e828e8595">Forward</a>(T &amp;&amp;value) noexcept :</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>      value_(std::forward&lt;T&gt;(value))</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  {</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  }</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno"><a class="line" href="classlazy__creation__details_1_1Forward.xhtml#a5b7923a5952e071b04b9cad68a6d7fd5">   36</a></span>  <span class="keyword">operator</span> T()</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  {</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    <span class="keywordflow">return</span> std::forward&lt;T&gt;(value_);</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  }</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  T value_;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>};</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>} <span class="comment">/* end of namespace lazy_creation_details */</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="lazy__creation_8hpp.xhtml#a542c27c7285eedb48df326464fa7c4aa">   60</a></span><span class="keyword">auto</span> <a class="code hl_function" href="lazy__creation_8hpp.xhtml#a542c27c7285eedb48df326464fa7c4aa">createCreatorForNewObject</a>(Args &amp;&amp;... args) -&gt; <span class="keyword">decltype</span>(</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    std::bind(</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>        lazy_creation_details::make_new&lt;T, Args...&gt;,</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>        <a class="code hl_class" href="classlazy__creation__details_1_1Forward.xhtml">lazy_creation_details::Forward&lt;Args&gt;</a>(std::forward&lt;Args&gt;(args))...))</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>{</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keywordflow">return</span> std::bind(</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>                   lazy_creation_details::make_new&lt;T, Args...&gt;,</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>                   <a class="code hl_class" href="classlazy__creation__details_1_1Forward.xhtml">lazy_creation_details::Forward&lt;Args&gt;</a>(std::forward&lt;Args&gt;(args))...);</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>}</div>
<div class="ttc" id="aarduino__helpers_8hpp_xhtml_a8a40d3489d8d1b60ee4760237c9c4d6d"><div class="ttname"><a href="arduino__helpers_8hpp.xhtml#a8a40d3489d8d1b60ee4760237c9c4d6d">new_s_pre</a></div><div class="ttdeci">#define new_s_pre(T)</div><div class="ttdef"><b>Definition:</b> arduino_helpers.hpp:23</div></div>
<div class="ttc" id="aclasslazy__creation__details_1_1Forward_xhtml"><div class="ttname"><a href="classlazy__creation__details_1_1Forward.xhtml">lazy_creation_details::Forward</a></div><div class="ttdoc">Wrap a value of type T and perfect-forward it when accessed.</div><div class="ttdef"><b>Definition:</b> lazy_creation.hpp:29</div></div>
<div class="ttc" id="aclasslazy__creation__details_1_1Forward_xhtml_aac49e7de9d89ebd0b87f444e828e8595"><div class="ttname"><a href="classlazy__creation__details_1_1Forward.xhtml#aac49e7de9d89ebd0b87f444e828e8595">lazy_creation_details::Forward::Forward</a></div><div class="ttdeci">Forward(T &amp;&amp;value) noexcept</div><div class="ttdef"><b>Definition:</b> lazy_creation.hpp:31</div></div>
<div class="ttc" id="alazy__creation_8hpp_xhtml_a542c27c7285eedb48df326464fa7c4aa"><div class="ttname"><a href="lazy__creation_8hpp.xhtml#a542c27c7285eedb48df326464fa7c4aa">createCreatorForNewObject</a></div><div class="ttdeci">auto createCreatorForNewObject(Args &amp;&amp;... args) -&gt; decltype(std::bind(lazy_creation_details::make_new&lt; T, Args... &gt;, lazy_creation_details::Forward&lt; Args &gt;(std::forward&lt; Args &gt;(args))...))</div><div class="ttdoc">Generates a creator object which creates a new object when that is called.</div><div class="ttdef"><b>Definition:</b> lazy_creation.hpp:60</div></div>
<div class="ttc" id="anamespacelazy__creation__details_xhtml"><div class="ttname"><a href="namespacelazy__creation__details.xhtml">lazy_creation_details</a></div><div class="ttdef"><b>Definition:</b> lazy_creation.hpp:11</div></div>
<div class="ttc" id="anamespacelazy__creation__details_xhtml_a1c721de2ab5b57d9f6cda47692e75c20"><div class="ttname"><a href="namespacelazy__creation__details.xhtml#a1c721de2ab5b57d9f6cda47692e75c20">lazy_creation_details::make_new</a></div><div class="ttdeci">T * make_new(Args &amp;&amp;... args)</div><div class="ttdoc">Returns a pointer to a new object of type T constructed from args.</div><div class="ttdef"><b>Definition:</b> lazy_creation.hpp:16</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Jul 25 2022 10:42:08 for Robot Control by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4
</small></address>
</body>
</html>
