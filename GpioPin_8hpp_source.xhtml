<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Robot Control: robot-control-src/src/device_drivers/GpioPin.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Robot Control
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_11fcc4a44a9b64dfb7d33c3f0a78b9e9.xhtml">robot-control-src</a></li><li class="navelem"><a class="el" href="dir_2db2811a5034f27e35c4073bde1407d6.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_3e2ed7453ca5ca7497cbb343ec5079ea.xhtml">device_drivers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle"><div class="title">GpioPin.hpp</div></div>
</div><!--header-->
<div class="contents">
<a href="GpioPin_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#ifndef GPIOPIN_HPP_</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#define GPIOPIN_HPP_</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &quot;<a class="code" href="GpioInterface_8hpp.xhtml">GpioInterface.hpp</a>&quot;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &quot;../utils/arduino_helpers.hpp&quot;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Arduino.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span>&lt;std::u<span class="keywordtype">int</span>8_t PIN&gt;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml">   16</a></span><span class="keyword">class </span><a class="code hl_class" href="classGpioPin.xhtml">GpioPin</a>: <span class="keyword">public</span> <a class="code hl_class" href="classGpioInterface.xhtml">GpioInterface</a></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">   19</a></span>    <span class="keyword">static</span> <span class="keyword">constexpr</span> std::uint8_t <a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a> = PIN;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml#a5d9149c5254a9ebd41771f8c4f5e7c33">   21</a></span>    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code hl_function" href="classGpioPin.xhtml#a5d9149c5254a9ebd41771f8c4f5e7c33">read</a>()<span class="keyword"> override</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>        <span class="keywordflow">return</span> <a class="code hl_function" href="GpioInterface_8cpp.xhtml#a16790aaeca9dad0fb35ac80ddf62da55">digitalRead</a>(<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>);</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>    }</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml#ab778727e3d077c767c195318301c6880">   26</a></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classGpioPin.xhtml#ab778727e3d077c767c195318301c6880">setMode</a>(<span class="keyword">const</span> std::uint8_t mode)<span class="keyword"> override</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>        <a class="code hl_function" href="GpioInterface_8cpp.xhtml#a411111494f168928968370c675943a4e">pinMode</a>(<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>, mode);</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    }</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml#a94f825bb55f253005868d3a0ca16991f">   31</a></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="classGpioPin.xhtml#a94f825bb55f253005868d3a0ca16991f">write</a>(<span class="keyword">const</span> std::uint8_t value)<span class="keyword"> override</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>        <a class="code hl_function" href="GpioInterface_8cpp.xhtml#a0a56584d033e38784250852460b56372">digitalWrite</a>(<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>, value);</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    }</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="classGpioPin.xhtml#a44f48926b6e52ab221b689d5248cde99">   40</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="classGpioPin.xhtml#a44f48926b6e52ab221b689d5248cde99">setDutyCycle</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> dutyCycle)<span class="keyword"> const</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>        <a class="code hl_function" href="GpioPin_8hpp.xhtml#affab782c5ee6662dd2e5d0c48aae4777">analogWrite</a>(<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>, dutyCycle);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    }</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>};</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="comment">/* If digitalPinToInterrupt is defined as C preprocessor macro it needs to be</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="comment"> * undefined. digitalPinToInterrupt must be overloaded for GpioPin. This is</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="comment"> * not possible for macros.</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="comment"> */</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="preprocessor">#if defined(digitalPinToInterrupt)</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">int</span> digitalPinToInterruptWrapper(<span class="keyword">const</span> <span class="keywordtype">int</span> pinNumber)</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>{</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a>(pinNumber);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>}</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span><span class="comment">/* Undefine macro in order to enable function declaration with the same name. */</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="preprocessor">#undef digitalPinToInterrupt</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="keywordtype">int</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> pinNumber)</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>{</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="keywordflow">return</span> digitalPinToInterruptWrapper(pinNumber);</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>}</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="preprocessor">#endif </span><span class="comment">/* defined(digitalPinToInterrupt) */</span><span class="preprocessor"></span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> <span class="comment">/* Start group for function overloads */</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span><span class="keyword">template</span>&lt;std::u<span class="keywordtype">int</span>8_t PIN&gt;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">   98</a></span><span class="keywordtype">int</span> <span class="keyword">constexpr</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a>(<span class="keyword">const</span> <a class="code hl_class" href="classGpioPin.xhtml">GpioPin&lt;PIN&gt;</a>&amp; gpio)</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>{</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a>(gpio.<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>);</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>}</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">template</span>&lt;std::u<span class="keywordtype">int</span>8_t PIN&gt;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno"><a class="line" href="GpioPin_8hpp.xhtml#a5441970081254d8f00ace3ad774b3fee">  112</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#a5441970081254d8f00ace3ad774b3fee">attachInterrupt</a>(<span class="keyword">const</span> <a class="code hl_class" href="classGpioPin.xhtml">GpioPin&lt;PIN&gt;</a>&amp; gpio, <span class="keyword">const</span> <a class="code hl_typedef" href="arduino__helpers_8hpp.xhtml#a276390435f8f238655cb4b091e073f99">InterruptFunctionPointer</a> interruptServiceRoutine, <span class="keyword">const</span> <span class="keywordtype">int</span> mode)</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>{</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    <a class="code hl_function" href="GpioPin_8hpp.xhtml#a5441970081254d8f00ace3ad774b3fee">attachInterrupt</a>(<a class="code hl_function" href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a>(gpio.<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>), interruptServiceRoutine, mode);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>}</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span><span class="keyword">template</span>&lt;std::u<span class="keywordtype">int</span>8_t PIN&gt;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno"><a class="line" href="GpioPin_8hpp.xhtml#affab782c5ee6662dd2e5d0c48aae4777">  124</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="GpioPin_8hpp.xhtml#affab782c5ee6662dd2e5d0c48aae4777">analogWrite</a>(<span class="keyword">const</span> <a class="code hl_class" href="classGpioPin.xhtml">GpioPin&lt;PIN&gt;</a>&amp; gpio, <span class="keyword">const</span> <span class="keywordtype">int</span> dutyCycle)</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>{</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    <a class="code hl_function" href="GpioPin_8hpp.xhtml#affab782c5ee6662dd2e5d0c48aae4777">analogWrite</a>(gpio.<a class="code hl_variable" href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">pin</a>, dutyCycle);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>}</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> <span class="comment">/* End group for function overloads */</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span><span class="preprocessor">#endif </span><span class="comment">/* GPIOPIN_HPP_ */</span><span class="preprocessor"></span></div>
<div class="ttc" id="aGpioInterface_8cpp_xhtml_a0a56584d033e38784250852460b56372"><div class="ttname"><a href="GpioInterface_8cpp.xhtml#a0a56584d033e38784250852460b56372">digitalWrite</a></div><div class="ttdeci">void digitalWrite(GpioInterface &amp;gpio, const std::uint8_t value)</div><div class="ttdoc">Sets output value of the pin.</div><div class="ttdef"><b>Definition:</b> GpioInterface.cpp:3</div></div>
<div class="ttc" id="aGpioInterface_8cpp_xhtml_a16790aaeca9dad0fb35ac80ddf62da55"><div class="ttname"><a href="GpioInterface_8cpp.xhtml#a16790aaeca9dad0fb35ac80ddf62da55">digitalRead</a></div><div class="ttdeci">int digitalRead(GpioInterface &amp;gpio)</div><div class="ttdoc">Reads the value of the pin.</div><div class="ttdef"><b>Definition:</b> GpioInterface.cpp:8</div></div>
<div class="ttc" id="aGpioInterface_8cpp_xhtml_a411111494f168928968370c675943a4e"><div class="ttname"><a href="GpioInterface_8cpp.xhtml#a411111494f168928968370c675943a4e">pinMode</a></div><div class="ttdeci">void pinMode(GpioInterface &amp;gpio, const std::uint8_t mode)</div><div class="ttdoc">Configures the pin to be either input or output.</div><div class="ttdef"><b>Definition:</b> GpioInterface.cpp:13</div></div>
<div class="ttc" id="aGpioInterface_8hpp_xhtml"><div class="ttname"><a href="GpioInterface_8hpp.xhtml">GpioInterface.hpp</a></div></div>
<div class="ttc" id="aGpioPin_8hpp_xhtml_a1df1ff5b216268e3ae64f753f38a7b54"><div class="ttname"><a href="GpioPin_8hpp.xhtml#a1df1ff5b216268e3ae64f753f38a7b54">digitalPinToInterrupt</a></div><div class="ttdeci">int constexpr digitalPinToInterrupt(const GpioPin&lt; PIN &gt; &amp;gpio)</div><div class="ttdoc">Getter for the interrupt number for a digital input pin.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:98</div></div>
<div class="ttc" id="aGpioPin_8hpp_xhtml_a5441970081254d8f00ace3ad774b3fee"><div class="ttname"><a href="GpioPin_8hpp.xhtml#a5441970081254d8f00ace3ad774b3fee">attachInterrupt</a></div><div class="ttdeci">void attachInterrupt(const GpioPin&lt; PIN &gt; &amp;gpio, const InterruptFunctionPointer interruptServiceRoutine, const int mode)</div><div class="ttdoc">Attach function to be called on external interrupt.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:112</div></div>
<div class="ttc" id="aGpioPin_8hpp_xhtml_affab782c5ee6662dd2e5d0c48aae4777"><div class="ttname"><a href="GpioPin_8hpp.xhtml#affab782c5ee6662dd2e5d0c48aae4777">analogWrite</a></div><div class="ttdeci">void analogWrite(const GpioPin&lt; PIN &gt; &amp;gpio, const int dutyCycle)</div><div class="ttdoc">Sets PWM duty cycle to pin.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:124</div></div>
<div class="ttc" id="aarduino__helpers_8hpp_xhtml_a276390435f8f238655cb4b091e073f99"><div class="ttname"><a href="arduino__helpers_8hpp.xhtml#a276390435f8f238655cb4b091e073f99">InterruptFunctionPointer</a></div><div class="ttdeci">void(*)(void) InterruptFunctionPointer</div><div class="ttdef"><b>Definition:</b> arduino_helpers.hpp:18</div></div>
<div class="ttc" id="aclassGpioInterface_xhtml"><div class="ttname"><a href="classGpioInterface.xhtml">GpioInterface</a></div><div class="ttdoc">Interface for digital input and output pins.</div><div class="ttdef"><b>Definition:</b> GpioInterface.hpp:15</div></div>
<div class="ttc" id="aclassGpioPin_xhtml"><div class="ttname"><a href="classGpioPin.xhtml">GpioPin</a></div><div class="ttdoc">Extension of GpioInterface for the processors general purpose input/output pins.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:17</div></div>
<div class="ttc" id="aclassGpioPin_xhtml_a44f48926b6e52ab221b689d5248cde99"><div class="ttname"><a href="classGpioPin.xhtml#a44f48926b6e52ab221b689d5248cde99">GpioPin::setDutyCycle</a></div><div class="ttdeci">void setDutyCycle(const int dutyCycle) const</div><div class="ttdoc">Sets PWM duty cycle.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:40</div></div>
<div class="ttc" id="aclassGpioPin_xhtml_a5d9149c5254a9ebd41771f8c4f5e7c33"><div class="ttname"><a href="classGpioPin.xhtml#a5d9149c5254a9ebd41771f8c4f5e7c33">GpioPin::read</a></div><div class="ttdeci">virtual int read() override</div><div class="ttdoc">Reads the value of the pin.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:21</div></div>
<div class="ttc" id="aclassGpioPin_xhtml_a94f825bb55f253005868d3a0ca16991f"><div class="ttname"><a href="classGpioPin.xhtml#a94f825bb55f253005868d3a0ca16991f">GpioPin::write</a></div><div class="ttdeci">virtual void write(const std::uint8_t value) override</div><div class="ttdoc">Sets output value of the pin.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:31</div></div>
<div class="ttc" id="aclassGpioPin_xhtml_ab355bfafed7962bc36b92247a1860329"><div class="ttname"><a href="classGpioPin.xhtml#ab355bfafed7962bc36b92247a1860329">GpioPin::pin</a></div><div class="ttdeci">static constexpr std::uint8_t pin</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:19</div></div>
<div class="ttc" id="aclassGpioPin_xhtml_ab778727e3d077c767c195318301c6880"><div class="ttname"><a href="classGpioPin.xhtml#ab778727e3d077c767c195318301c6880">GpioPin::setMode</a></div><div class="ttdeci">virtual void setMode(const std::uint8_t mode) override</div><div class="ttdoc">Configures the pin to be either input or output.</div><div class="ttdef"><b>Definition:</b> GpioPin.hpp:26</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 10 2022 16:26:03 for Robot Control by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4
</small></address>
</body>
</html>
