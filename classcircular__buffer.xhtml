<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Robot Control: circular_buffer&lt; _Tp, N_ &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  extensions: ["tex2jax.js"],
  jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">Robot Control
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classcircular__buffer-members.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">circular_buffer&lt; _Tp, N_ &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="circular__buffer_8hpp_source.xhtml">circular_buffer.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a1203e390c73e6953091a87bb16ad25e9"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> = typename std::remove_const&lt; _Tp &gt;::type</td></tr>
<tr class="separator:a1203e390c73e6953091a87bb16ad25e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04b5fdb24db3b6bcf0632b932afea704"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a04b5fdb24db3b6bcf0632b932afea704">reference</a> = <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> &amp;</td></tr>
<tr class="separator:a04b5fdb24db3b6bcf0632b932afea704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d8bdf99a8e1458918936007e3f5d28c"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a0d8bdf99a8e1458918936007e3f5d28c">const_reference</a> = const <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> &amp;</td></tr>
<tr class="separator:a0d8bdf99a8e1458918936007e3f5d28c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5e7aba934deaf5c611ea6a624329c4"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> = <a class="el" href="types_8hpp.xhtml#a57f22ed91762ba330777f02595c11977">IntegerMinType_t</a>&lt; N_+1 &gt;</td></tr>
<tr class="separator:a7f5e7aba934deaf5c611ea6a624329c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12598d17bf9863ce2674b9234b57fb3b"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a12598d17bf9863ce2674b9234b57fb3b">iterator</a> = <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> &gt;</td></tr>
<tr class="separator:a12598d17bf9863ce2674b9234b57fb3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae65959d747233a608963e3d8e2438851"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#ae65959d747233a608963e3d8e2438851">const_iterator</a> = <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt; const <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> &gt;</td></tr>
<tr class="separator:ae65959d747233a608963e3d8e2438851"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54ea4e5244133695a2ec5ea6d58979f6"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a54ea4e5244133695a2ec5ea6d58979f6">difference_type</a> = typename std::iterator_traits&lt; <a class="el" href="classcircular__buffer.xhtml#a12598d17bf9863ce2674b9234b57fb3b">iterator</a> &gt;::difference_type</td></tr>
<tr class="separator:a54ea4e5244133695a2ec5ea6d58979f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1071ad065e54460528a5925565bad7dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a1071ad065e54460528a5925565bad7dd">size</a> () const</td></tr>
<tr class="separator:a1071ad065e54460528a5925565bad7dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae19fca08bb022c07c695c560c28bddda"><td class="memItemLeft" align="right" valign="top">constexpr <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#ae19fca08bb022c07c695c560c28bddda">max_size</a> () const</td></tr>
<tr class="separator:ae19fca08bb022c07c695c560c28bddda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f05e234b9646b910124a0e7aa916880"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a0f05e234b9646b910124a0e7aa916880">empty</a> () const</td></tr>
<tr class="separator:a0f05e234b9646b910124a0e7aa916880"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af151eafe5ba6b36a66e4bc2af60cb9e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#af151eafe5ba6b36a66e4bc2af60cb9e0">at</a> (const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> index) const</td></tr>
<tr class="memdesc:af151eafe5ba6b36a66e4bc2af60cb9e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns value at index.  <a href="classcircular__buffer.xhtml#af151eafe5ba6b36a66e4bc2af60cb9e0">More...</a><br /></td></tr>
<tr class="separator:af151eafe5ba6b36a66e4bc2af60cb9e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f863126c418b26760c5c7a5f8343886"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a3f863126c418b26760c5c7a5f8343886">push_back</a> (<a class="el" href="classcircular__buffer.xhtml#a0d8bdf99a8e1458918936007e3f5d28c">const_reference</a> value)</td></tr>
<tr class="separator:a3f863126c418b26760c5c7a5f8343886"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af09c68a7002f9ed72408e8c92701a4b9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcircular__buffer.xhtml#ae65959d747233a608963e3d8e2438851">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#af09c68a7002f9ed72408e8c92701a4b9">begin</a> () const</td></tr>
<tr class="separator:af09c68a7002f9ed72408e8c92701a4b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaa26ecaf9c4e6eeba55ea20609c89f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classcircular__buffer.xhtml#ae65959d747233a608963e3d8e2438851">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#aaaa26ecaf9c4e6eeba55ea20609c89f0">end</a> () const</td></tr>
<tr class="separator:aaaa26ecaf9c4e6eeba55ea20609c89f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f5e60ea16a8ac12f95dda2d4c5e8a36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#a7f5e60ea16a8ac12f95dda2d4c5e8a36">clear</a> ()</td></tr>
<tr class="separator:a7f5e60ea16a8ac12f95dda2d4c5e8a36"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac6940bac49c08ce804b9d41a8389521d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classcircular__buffer.xhtml#ac6940bac49c08ce804b9d41a8389521d">next_index</a> (const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> current_index)</td></tr>
<tr class="separator:ac6940bac49c08ce804b9d41a8389521d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Typedef Documentation</h2>
<a id="ae65959d747233a608963e3d8e2438851" name="ae65959d747233a608963e3d8e2438851"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae65959d747233a608963e3d8e2438851">&#9670;&nbsp;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::const_iterator =  <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt;const <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d8bdf99a8e1458918936007e3f5d28c" name="a0d8bdf99a8e1458918936007e3f5d28c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d8bdf99a8e1458918936007e3f5d28c">&#9670;&nbsp;</a></span>const_reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::const_reference =  const <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a54ea4e5244133695a2ec5ea6d58979f6" name="a54ea4e5244133695a2ec5ea6d58979f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54ea4e5244133695a2ec5ea6d58979f6">&#9670;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::difference_type =  typename std::iterator_traits&lt;<a class="el" href="classcircular__buffer.xhtml#a12598d17bf9863ce2674b9234b57fb3b">iterator</a>&gt;::difference_type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a12598d17bf9863ce2674b9234b57fb3b" name="a12598d17bf9863ce2674b9234b57fb3b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12598d17bf9863ce2674b9234b57fb3b">&#9670;&nbsp;</a></span>iterator</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::iterator =  <a class="el" href="classcircular__buffer_1_1__iterator.xhtml">_iterator</a>&lt;<a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a>&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a04b5fdb24db3b6bcf0632b932afea704" name="a04b5fdb24db3b6bcf0632b932afea704"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04b5fdb24db3b6bcf0632b932afea704">&#9670;&nbsp;</a></span>reference</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::reference =  <a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a>&amp;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f5e7aba934deaf5c611ea6a624329c4" name="a7f5e7aba934deaf5c611ea6a624329c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f5e7aba934deaf5c611ea6a624329c4">&#9670;&nbsp;</a></span>size_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::size_type =  <a class="el" href="types_8hpp.xhtml#a57f22ed91762ba330777f02595c11977">IntegerMinType_t</a>&lt;N_+1&gt;</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1203e390c73e6953091a87bb16ad25e9" name="a1203e390c73e6953091a87bb16ad25e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1203e390c73e6953091a87bb16ad25e9">&#9670;&nbsp;</a></span>value_type</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::value_type =  typename std::remove_const&lt;_Tp&gt;::type</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="af151eafe5ba6b36a66e4bc2af60cb9e0" name="af151eafe5ba6b36a66e4bc2af60cb9e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af151eafe5ba6b36a66e4bc2af60cb9e0">&#9670;&nbsp;</a></span>at()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer.xhtml#a1203e390c73e6953091a87bb16ad25e9">value_type</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::at </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns value at index. </p>
<p >The index with the lowest value points to the oldest entry. The index with the highest values points to the newest entry. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>[0...N] </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>copy of value at index </dd></dl>

</div>
</div>
<a id="af09c68a7002f9ed72408e8c92701a4b9" name="af09c68a7002f9ed72408e8c92701a4b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af09c68a7002f9ed72408e8c92701a4b9">&#9670;&nbsp;</a></span>begin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer.xhtml#ae65959d747233a608963e3d8e2438851">const_iterator</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a7f5e60ea16a8ac12f95dda2d4c5e8a36" name="a7f5e60ea16a8ac12f95dda2d4c5e8a36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f5e60ea16a8ac12f95dda2d4c5e8a36">&#9670;&nbsp;</a></span>clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::clear </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0f05e234b9646b910124a0e7aa916880" name="a0f05e234b9646b910124a0e7aa916880"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f05e234b9646b910124a0e7aa916880">&#9670;&nbsp;</a></span>empty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aaaa26ecaf9c4e6eeba55ea20609c89f0" name="aaaa26ecaf9c4e6eeba55ea20609c89f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaa26ecaf9c4e6eeba55ea20609c89f0">&#9670;&nbsp;</a></span>end()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer.xhtml#ae65959d747233a608963e3d8e2438851">const_iterator</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ae19fca08bb022c07c695c560c28bddda" name="ae19fca08bb022c07c695c560c28bddda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae19fca08bb022c07c695c560c28bddda">&#9670;&nbsp;</a></span>max_size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::max_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac6940bac49c08ce804b9d41a8389521d" name="ac6940bac49c08ce804b9d41a8389521d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6940bac49c08ce804b9d41a8389521d">&#9670;&nbsp;</a></span>next_index()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::next_index </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a>&#160;</td>
          <td class="paramname"><em>current_index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f863126c418b26760c5c7a5f8343886" name="a3f863126c418b26760c5c7a5f8343886"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f863126c418b26760c5c7a5f8343886">&#9670;&nbsp;</a></span>push_back()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::push_back </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classcircular__buffer.xhtml#a0d8bdf99a8e1458918936007e3f5d28c">const_reference</a>&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1071ad065e54460528a5925565bad7dd" name="a1071ad065e54460528a5925565bad7dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1071ad065e54460528a5925565bad7dd">&#9670;&nbsp;</a></span>size()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename _Tp , std::size_t N_&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classcircular__buffer.xhtml#a7f5e7aba934deaf5c611ea6a624329c4">size_type</a> <a class="el" href="classcircular__buffer.xhtml">circular_buffer</a>&lt; _Tp, N_ &gt;::size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>robot-control-src/src/utils/<a class="el" href="circular__buffer_8hpp_source.xhtml">circular_buffer.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 10 2022 16:26:03 for Robot Control by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4
</small></address>
</body>
</html>
